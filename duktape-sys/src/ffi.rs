/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

use libc::*;

pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;

pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;

pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;

pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;

// TODO: map this to something reasonable?
pub type va_list = [u8; 0];

pub type duk_uint8_t = uint8_t;
pub type duk_int8_t = int8_t;
pub type duk_uint16_t = uint16_t;
pub type duk_int16_t = int16_t;
pub type duk_uint32_t = uint32_t;
pub type duk_int32_t = int32_t;
pub type duk_uint64_t = uint64_t;
pub type duk_int64_t = int64_t;
pub type duk_uint_least8_t = uint_least8_t;
pub type duk_int_least8_t = int_least8_t;
pub type duk_uint_least16_t = uint_least16_t;
pub type duk_int_least16_t = int_least16_t;
pub type duk_uint_least32_t = uint_least32_t;
pub type duk_int_least32_t = int_least32_t;
pub type duk_uint_least64_t = uint_least64_t;
pub type duk_int_least64_t = int_least64_t;
pub type duk_uint_fast8_t = uint_fast8_t;
pub type duk_int_fast8_t = int_fast8_t;
pub type duk_uint_fast16_t = uint_fast16_t;
pub type duk_int_fast16_t = int_fast16_t;
pub type duk_uint_fast32_t = uint_fast32_t;
pub type duk_int_fast32_t = int_fast32_t;
pub type duk_uint_fast64_t = uint_fast64_t;
pub type duk_int_fast64_t = int_fast64_t;
pub type duk_uintptr_t = uintptr_t;
pub type duk_intptr_t = intptr_t;
pub type duk_uintmax_t = uintmax_t;
pub type duk_intmax_t = intmax_t;
pub type duk_size_t = size_t;
pub type duk_ptrdiff_t = ptrdiff_t;
pub type duk_int_t = ::std::os::raw::c_int;
pub type duk_uint_t = ::std::os::raw::c_uint;
pub type duk_int_fast_t = duk_int_fast32_t;
pub type duk_uint_fast_t = duk_uint_fast32_t;
pub type duk_small_int_t = ::std::os::raw::c_int;
pub type duk_small_uint_t = ::std::os::raw::c_uint;
pub type duk_small_int_fast_t = duk_int_fast16_t;
pub type duk_small_uint_fast_t = duk_uint_fast16_t;
pub type duk_bool_t = duk_small_int_t;
pub type duk_idx_t = duk_int_t;
pub type duk_uidx_t = duk_uint_t;
pub type duk_uarridx_t = duk_uint_t;
pub type duk_ret_t = duk_small_int_t;
pub type duk_errcode_t = duk_int_t;
pub type duk_codepoint_t = duk_int_t;
pub type duk_ucodepoint_t = duk_uint_t;
pub type duk_float_t = ::std::os::raw::c_float;
pub type duk_double_t = ::std::os::raw::c_double;
pub enum duk_hthread { }
pub type duk_context = duk_hthread;
pub type duk_file = FILE;
pub type duk_c_function =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut duk_context)
                              -> duk_ret_t>;
pub type duk_alloc_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void,
                                               size: duk_size_t)
                              -> *mut ::std::os::raw::c_void>;
pub type duk_realloc_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void,
                                               ptr:
                                                   *mut ::std::os::raw::c_void,
                                               size: duk_size_t)
                              -> *mut ::std::os::raw::c_void>;
pub type duk_free_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void,
                                               ptr:
                                                   *mut ::std::os::raw::c_void)>;
pub type duk_fatal_function =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut duk_context,
                                               code: duk_errcode_t,
                                               msg:
                                                   *const ::std::os::raw::c_char)>;
pub type duk_decode_char_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void,
                                               codepoint: duk_codepoint_t)>;
pub type duk_map_char_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void,
                                               codepoint: duk_codepoint_t)
                              -> duk_codepoint_t>;
pub type duk_safe_call_function =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut duk_context)
                              -> duk_ret_t>;
pub type duk_debug_read_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *mut ::std::os::raw::c_char,
                                               length: duk_size_t)
                              -> duk_size_t>;
pub type duk_debug_write_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void,
                                               buffer:
                                                   *const ::std::os::raw::c_char,
                                               length: duk_size_t)
                              -> duk_size_t>;
pub type duk_debug_peek_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void)
                              -> duk_size_t>;
pub type duk_debug_read_flush_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void)>;
pub type duk_debug_write_flush_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void)>;
pub type duk_debug_request_function =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut duk_context,
                                               udata:
                                                   *mut ::std::os::raw::c_void,
                                               nvalues: duk_idx_t)
                              -> duk_idx_t>;
pub type duk_debug_detached_function =
    ::std::option::Option<unsafe extern "C" fn(udata:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct duk_memory_functions {
    pub alloc_func: duk_alloc_function,
    pub realloc_func: duk_realloc_function,
    pub free_func: duk_free_function,
    pub udata: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for duk_memory_functions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct duk_function_list_entry {
    pub key: *const ::std::os::raw::c_char,
    pub value: duk_c_function,
    pub nargs: duk_idx_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for duk_function_list_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct duk_number_list_entry {
    pub key: *const ::std::os::raw::c_char,
    pub value: duk_double_t,
}
impl ::std::default::Default for duk_number_list_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct duk_double_union {
    pub _bindgen_data_: [u64; 1usize],
}
impl duk_double_union {
    pub unsafe fn d(&mut self) -> *mut ::std::os::raw::c_double {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut [::std::os::raw::c_float; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ull(&mut self) -> *mut [duk_uint64_t; 1usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ui(&mut self) -> *mut [duk_uint32_t; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn us(&mut self) -> *mut [duk_uint16_t; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uc(&mut self) -> *mut [duk_uint8_t; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for duk_double_union {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static DUK_VERSION: duk_uint_t;
    pub static DUK_GIT_COMMIT: *const ::std::os::raw::c_char;
    pub static DUK_GIT_DESCRIBE: *const ::std::os::raw::c_char;
    pub static DUK_GIT_BRANCH: *const ::std::os::raw::c_char;
    pub static DUK_DEBUG_PROTOCOL_VERSION: duk_uint_t;
    pub static DUK_INVALID_INDEX: duk_idx_t;
    pub static DUK_VARARGS: duk_int_t;
    pub static DUK_API_ENTRY_STACK: duk_size_t;
    pub static DUK_TYPE_MIN: duk_int_t;
    pub static DUK_TYPE_NONE: duk_int_t;
    pub static DUK_TYPE_UNDEFINED: duk_int_t;
    pub static DUK_TYPE_NULL: duk_int_t;
    pub static DUK_TYPE_BOOLEAN: duk_int_t;
    pub static DUK_TYPE_NUMBER: duk_int_t;
    pub static DUK_TYPE_STRING: duk_int_t;
    pub static DUK_TYPE_OBJECT: duk_int_t;
    pub static DUK_TYPE_BUFFER: duk_int_t;
    pub static DUK_TYPE_POINTER: duk_int_t;
    pub static DUK_TYPE_LIGHTFUNC: duk_int_t;
    pub static DUK_TYPE_MAX: duk_int_t;
    pub static DUK_TYPE_MASK_NONE: duk_uint_t;
    pub static DUK_TYPE_MASK_UNDEFINED: duk_uint_t;
    pub static DUK_TYPE_MASK_NULL: duk_uint_t;
    pub static DUK_TYPE_MASK_BOOLEAN: duk_uint_t;
    pub static DUK_TYPE_MASK_NUMBER: duk_uint_t;
    pub static DUK_TYPE_MASK_STRING: duk_uint_t;
    pub static DUK_TYPE_MASK_OBJECT: duk_uint_t;
    pub static DUK_TYPE_MASK_BUFFER: duk_uint_t;
    pub static DUK_TYPE_MASK_POINTER: duk_uint_t;
    pub static DUK_TYPE_MASK_LIGHTFUNC: duk_uint_t;
    pub static DUK_TYPE_MASK_THROW: duk_uint_t;
    pub static DUK_HINT_NONE: duk_int_t;
    pub static DUK_HINT_STRING: duk_int_t;
    pub static DUK_HINT_NUMBER: duk_int_t;
    pub static DUK_ENUM_INCLUDE_NONENUMERABLE: duk_uint_t;
    pub static DUK_ENUM_INCLUDE_INTERNAL: duk_uint_t;
    pub static DUK_ENUM_OWN_PROPERTIES_ONLY: duk_uint_t;
    pub static DUK_ENUM_ARRAY_INDICES_ONLY: duk_uint_t;
    pub static DUK_ENUM_SORT_ARRAY_INDICES: duk_uint_t;
    pub static DUK_ENUM_NO_PROXY_BEHAVIOR: duk_uint_t;
    pub static DUK_COMPILE_EVAL: duk_uint_t;
    pub static DUK_COMPILE_FUNCTION: duk_uint_t;
    pub static DUK_COMPILE_STRICT: duk_uint_t;
    pub static DUK_COMPILE_SAFE: duk_uint_t;
    pub static DUK_COMPILE_NORESULT: duk_uint_t;
    pub static DUK_COMPILE_NOSOURCE: duk_uint_t;
    pub static DUK_COMPILE_STRLEN: duk_uint_t;
    pub static DUK_COMPILE_NOFILENAME: duk_uint_t;
    pub static DUK_DEFPROP_WRITABLE: duk_uint_t;
    pub static DUK_DEFPROP_ENUMERABLE: duk_uint_t;
    pub static DUK_DEFPROP_CONFIGURABLE: duk_uint_t;
    pub static DUK_DEFPROP_HAVE_WRITABLE: duk_uint_t;
    pub static DUK_DEFPROP_HAVE_ENUMERABLE: duk_uint_t;
    pub static DUK_DEFPROP_HAVE_CONFIGURABLE: duk_uint_t;
    pub static DUK_DEFPROP_HAVE_VALUE: duk_uint_t;
    pub static DUK_DEFPROP_HAVE_GETTER: duk_uint_t;
    pub static DUK_DEFPROP_HAVE_SETTER: duk_uint_t;
    pub static DUK_DEFPROP_FORCE: duk_uint_t;
    pub static DUK_DEFPROP_SET_WRITABLE: duk_uint_t;
    pub static DUK_DEFPROP_CLEAR_WRITABLE: duk_uint_t;
    pub static DUK_DEFPROP_SET_ENUMERABLE: duk_uint_t;
    pub static DUK_DEFPROP_CLEAR_ENUMERABLE: duk_uint_t;
    pub static DUK_DEFPROP_SET_CONFIGURABLE: duk_uint_t;
    pub static DUK_DEFPROP_CLEAR_CONFIGURABLE: duk_uint_t;
    pub static DUK_THREAD_NEW_GLOBAL_ENV: duk_uint_t;
    pub static DUK_STRING_PUSH_SAFE: duk_uint_t;
    pub static DUK_ERR_NONE: duk_errcode_t;
    pub static DUK_ERR_UNIMPLEMENTED_ERROR: duk_errcode_t;
    pub static DUK_ERR_UNSUPPORTED_ERROR: duk_errcode_t;
    pub static DUK_ERR_INTERNAL_ERROR: duk_errcode_t;
    pub static DUK_ERR_ALLOC_ERROR: duk_errcode_t;
    pub static DUK_ERR_ASSERTION_ERROR: duk_errcode_t;
    pub static DUK_ERR_API_ERROR: duk_errcode_t;
    pub static DUK_ERR_UNCAUGHT_ERROR: duk_errcode_t;
    pub static DUK_ERR_ERROR: duk_errcode_t;
    pub static DUK_ERR_EVAL_ERROR: duk_errcode_t;
    pub static DUK_ERR_RANGE_ERROR: duk_errcode_t;
    pub static DUK_ERR_REFERENCE_ERROR: duk_errcode_t;
    pub static DUK_ERR_SYNTAX_ERROR: duk_errcode_t;
    pub static DUK_ERR_TYPE_ERROR: duk_errcode_t;
    pub static DUK_ERR_URI_ERROR: duk_errcode_t;
    pub static DUK_RET_UNIMPLEMENTED_ERROR: duk_ret_t;
    pub static DUK_RET_UNSUPPORTED_ERROR: duk_ret_t;
    pub static DUK_RET_INTERNAL_ERROR: duk_ret_t;
    pub static DUK_RET_ALLOC_ERROR: duk_ret_t;
    pub static DUK_RET_ASSERTION_ERROR: duk_ret_t;
    pub static DUK_RET_API_ERROR: duk_ret_t;
    pub static DUK_RET_UNCAUGHT_ERROR: duk_ret_t;
    pub static DUK_RET_ERROR: duk_ret_t;
    pub static DUK_RET_EVAL_ERROR: duk_ret_t;
    pub static DUK_RET_RANGE_ERROR: duk_ret_t;
    pub static DUK_RET_REFERENCE_ERROR: duk_ret_t;
    pub static DUK_RET_SYNTAX_ERROR: duk_ret_t;
    pub static DUK_RET_TYPE_ERROR: duk_ret_t;
    pub static DUK_RET_URI_ERROR: duk_ret_t;
    pub static DUK_EXEC_SUCCESS: duk_ret_t;
    pub static DUK_EXEC_ERROR: duk_ret_t;
    pub static DUK_LOG_TRACE: duk_int_t;
    pub static DUK_LOG_DEBUG: duk_int_t;
    pub static DUK_LOG_INFO: duk_int_t;
    pub static DUK_LOG_WARN: duk_int_t;
    pub static DUK_LOG_ERROR: duk_int_t;
    pub static DUK_LOG_FATAL: duk_int_t;
}
extern "C" {
    pub fn duk_create_heap(alloc_func: duk_alloc_function,
                           realloc_func: duk_realloc_function,
                           free_func: duk_free_function,
                           heap_udata: *mut ::std::os::raw::c_void,
                           fatal_handler: duk_fatal_function)
     -> *mut duk_context;
    pub fn duk_destroy_heap(ctx: *mut duk_context);
    pub fn duk_alloc_raw(ctx: *mut duk_context, size: duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_free_raw(ctx: *mut duk_context,
                        ptr: *mut ::std::os::raw::c_void);
    pub fn duk_realloc_raw(ctx: *mut duk_context,
                           ptr: *mut ::std::os::raw::c_void, size: duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_alloc(ctx: *mut duk_context, size: duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_free(ctx: *mut duk_context, ptr: *mut ::std::os::raw::c_void);
    pub fn duk_realloc(ctx: *mut duk_context,
                       ptr: *mut ::std::os::raw::c_void, size: duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_get_memory_functions(ctx: *mut duk_context,
                                    out_funcs: *mut duk_memory_functions);
    pub fn duk_gc(ctx: *mut duk_context, flags: duk_uint_t);
    pub fn duk_throw(ctx: *mut duk_context);
    pub fn duk_fatal(ctx: *mut duk_context, err_code: duk_errcode_t,
                     err_msg: *const ::std::os::raw::c_char);
    pub fn duk_error_raw(ctx: *mut duk_context, err_code: duk_errcode_t,
                         filename: *const ::std::os::raw::c_char,
                         line: duk_int_t,
                         fmt: *const ::std::os::raw::c_char, ...);
    pub fn duk_error_va_raw(ctx: *mut duk_context, err_code: duk_errcode_t,
                            filename: *const ::std::os::raw::c_char,
                            line: duk_int_t,
                            fmt: *const ::std::os::raw::c_char, ap: va_list);
    pub fn duk_is_strict_call(ctx: *mut duk_context) -> duk_bool_t;
    pub fn duk_is_constructor_call(ctx: *mut duk_context) -> duk_bool_t;
    pub fn duk_normalize_index(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_idx_t;
    pub fn duk_require_normalize_index(ctx: *mut duk_context,
                                       index: duk_idx_t) -> duk_idx_t;
    pub fn duk_is_valid_index(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_require_valid_index(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_get_top(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_set_top(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_get_top_index(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_require_top_index(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_check_stack(ctx: *mut duk_context, extra: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_require_stack(ctx: *mut duk_context, extra: duk_idx_t);
    pub fn duk_check_stack_top(ctx: *mut duk_context, top: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_require_stack_top(ctx: *mut duk_context, top: duk_idx_t);
    pub fn duk_swap(ctx: *mut duk_context, index1: duk_idx_t,
                    index2: duk_idx_t);
    pub fn duk_swap_top(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_dup(ctx: *mut duk_context, from_index: duk_idx_t);
    pub fn duk_dup_top(ctx: *mut duk_context);
    pub fn duk_insert(ctx: *mut duk_context, to_index: duk_idx_t);
    pub fn duk_replace(ctx: *mut duk_context, to_index: duk_idx_t);
    pub fn duk_copy(ctx: *mut duk_context, from_index: duk_idx_t,
                    to_index: duk_idx_t);
    pub fn duk_remove(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_xcopymove_raw(to_ctx: *mut duk_context,
                             from_ctx: *mut duk_context, count: duk_idx_t,
                             is_copy: duk_bool_t);
    pub fn duk_push_undefined(ctx: *mut duk_context);
    pub fn duk_push_null(ctx: *mut duk_context);
    pub fn duk_push_boolean(ctx: *mut duk_context, val: duk_bool_t);
    pub fn duk_push_true(ctx: *mut duk_context);
    pub fn duk_push_false(ctx: *mut duk_context);
    pub fn duk_push_number(ctx: *mut duk_context, val: duk_double_t);
    pub fn duk_push_nan(ctx: *mut duk_context);
    pub fn duk_push_int(ctx: *mut duk_context, val: duk_int_t);
    pub fn duk_push_uint(ctx: *mut duk_context, val: duk_uint_t);
    pub fn duk_push_string(ctx: *mut duk_context,
                           str: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn duk_push_lstring(ctx: *mut duk_context,
                            str: *const ::std::os::raw::c_char,
                            len: duk_size_t) -> *const ::std::os::raw::c_char;
    pub fn duk_push_pointer(ctx: *mut duk_context,
                            p: *mut ::std::os::raw::c_void);
    pub fn duk_push_sprintf(ctx: *mut duk_context,
                            fmt: *const ::std::os::raw::c_char, ...)
     -> *const ::std::os::raw::c_char;
    pub fn duk_push_vsprintf(ctx: *mut duk_context,
                             fmt: *const ::std::os::raw::c_char, ap: va_list)
     -> *const ::std::os::raw::c_char;
    pub fn duk_push_string_file_raw(ctx: *mut duk_context,
                                    path: *const ::std::os::raw::c_char,
                                    flags: duk_uint_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_push_this(ctx: *mut duk_context);
    pub fn duk_push_current_function(ctx: *mut duk_context);
    pub fn duk_push_current_thread(ctx: *mut duk_context);
    pub fn duk_push_global_object(ctx: *mut duk_context);
    pub fn duk_push_heap_stash(ctx: *mut duk_context);
    pub fn duk_push_global_stash(ctx: *mut duk_context);
    pub fn duk_push_thread_stash(ctx: *mut duk_context,
                                 target_ctx: *mut duk_context);
    pub fn duk_push_object(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_push_array(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_push_c_function(ctx: *mut duk_context, func: duk_c_function,
                               nargs: duk_idx_t) -> duk_idx_t;
    pub fn duk_push_c_lightfunc(ctx: *mut duk_context, func: duk_c_function,
                                nargs: duk_idx_t, length: duk_idx_t,
                                magic: duk_int_t) -> duk_idx_t;
    pub fn duk_push_thread_raw(ctx: *mut duk_context, flags: duk_uint_t)
     -> duk_idx_t;
    pub fn duk_push_error_object_raw(ctx: *mut duk_context,
                                     err_code: duk_errcode_t,
                                     filename: *const ::std::os::raw::c_char,
                                     line: duk_int_t,
                                     fmt: *const ::std::os::raw::c_char, ...)
     -> duk_idx_t;
    pub fn duk_push_error_object_va_raw(ctx: *mut duk_context,
                                        err_code: duk_errcode_t,
                                        filename:
                                            *const ::std::os::raw::c_char,
                                        line: duk_int_t,
                                        fmt: *const ::std::os::raw::c_char,
                                        ap: va_list) -> duk_idx_t;
    pub fn duk_push_buffer_raw(ctx: *mut duk_context, size: duk_size_t,
                               flags: duk_small_uint_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_push_buffer_object(ctx: *mut duk_context,
                                  idx_buffer: duk_idx_t,
                                  byte_offset: duk_size_t,
                                  byte_length: duk_size_t, flags: duk_uint_t);
    pub fn duk_push_heapptr(ctx: *mut duk_context,
                            ptr: *mut ::std::os::raw::c_void) -> duk_idx_t;
    pub fn duk_pop(ctx: *mut duk_context);
    pub fn duk_pop_n(ctx: *mut duk_context, count: duk_idx_t);
    pub fn duk_pop_2(ctx: *mut duk_context);
    pub fn duk_pop_3(ctx: *mut duk_context);
    pub fn duk_get_type(ctx: *mut duk_context, index: duk_idx_t) -> duk_int_t;
    pub fn duk_check_type(ctx: *mut duk_context, index: duk_idx_t,
                          type_: duk_int_t) -> duk_bool_t;
    pub fn duk_get_type_mask(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_uint_t;
    pub fn duk_check_type_mask(ctx: *mut duk_context, index: duk_idx_t,
                               mask: duk_uint_t) -> duk_bool_t;
    pub fn duk_is_undefined(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_null(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_null_or_undefined(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_boolean(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_number(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_nan(ctx: *mut duk_context, index: duk_idx_t) -> duk_bool_t;
    pub fn duk_is_string(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_object(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_buffer(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_pointer(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_lightfunc(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_array(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_function(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_c_function(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_ecmascript_function(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_bound_function(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_thread(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_dynamic_buffer(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_fixed_buffer(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_external_buffer(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_get_error_code(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_errcode_t;
    pub fn duk_get_boolean(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_get_number(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_double_t;
    pub fn duk_get_int(ctx: *mut duk_context, index: duk_idx_t) -> duk_int_t;
    pub fn duk_get_uint(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_uint_t;
    pub fn duk_get_string(ctx: *mut duk_context, index: duk_idx_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_get_lstring(ctx: *mut duk_context, index: duk_idx_t,
                           out_len: *mut duk_size_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_get_buffer(ctx: *mut duk_context, index: duk_idx_t,
                          out_size: *mut duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_get_buffer_data(ctx: *mut duk_context, index: duk_idx_t,
                               out_size: *mut duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_get_pointer(ctx: *mut duk_context, index: duk_idx_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_get_c_function(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_c_function;
    pub fn duk_get_context(ctx: *mut duk_context, index: duk_idx_t)
     -> *mut duk_context;
    pub fn duk_get_heapptr(ctx: *mut duk_context, index: duk_idx_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_get_length(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_size_t;
    pub fn duk_require_undefined(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_require_null(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_require_boolean(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_require_number(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_double_t;
    pub fn duk_require_int(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_int_t;
    pub fn duk_require_uint(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_uint_t;
    pub fn duk_require_string(ctx: *mut duk_context, index: duk_idx_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_require_lstring(ctx: *mut duk_context, index: duk_idx_t,
                               out_len: *mut duk_size_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_require_buffer(ctx: *mut duk_context, index: duk_idx_t,
                              out_size: *mut duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_require_buffer_data(ctx: *mut duk_context, index: duk_idx_t,
                                   out_size: *mut duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_require_pointer(ctx: *mut duk_context, index: duk_idx_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_require_c_function(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_c_function;
    pub fn duk_require_context(ctx: *mut duk_context, index: duk_idx_t)
     -> *mut duk_context;
    pub fn duk_require_function(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_require_heapptr(ctx: *mut duk_context, index: duk_idx_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_to_undefined(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_to_null(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_to_boolean(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_to_number(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_double_t;
    pub fn duk_to_int(ctx: *mut duk_context, index: duk_idx_t) -> duk_int_t;
    pub fn duk_to_uint(ctx: *mut duk_context, index: duk_idx_t) -> duk_uint_t;
    pub fn duk_to_int32(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_int32_t;
    pub fn duk_to_uint32(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_uint32_t;
    pub fn duk_to_uint16(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_uint16_t;
    pub fn duk_to_string(ctx: *mut duk_context, index: duk_idx_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_to_lstring(ctx: *mut duk_context, index: duk_idx_t,
                          out_len: *mut duk_size_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_to_buffer_raw(ctx: *mut duk_context, index: duk_idx_t,
                             out_size: *mut duk_size_t, flags: duk_uint_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_to_pointer(ctx: *mut duk_context, index: duk_idx_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_to_object(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_to_defaultvalue(ctx: *mut duk_context, index: duk_idx_t,
                               hint: duk_int_t);
    pub fn duk_to_primitive(ctx: *mut duk_context, index: duk_idx_t,
                            hint: duk_int_t);
    pub fn duk_safe_to_lstring(ctx: *mut duk_context, index: duk_idx_t,
                               out_len: *mut duk_size_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_base64_encode(ctx: *mut duk_context, index: duk_idx_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_base64_decode(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_hex_encode(ctx: *mut duk_context, index: duk_idx_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_hex_decode(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_json_encode(ctx: *mut duk_context, index: duk_idx_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_json_decode(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_resize_buffer(ctx: *mut duk_context, index: duk_idx_t,
                             new_size: duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_steal_buffer(ctx: *mut duk_context, index: duk_idx_t,
                            out_size: *mut duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_config_buffer(ctx: *mut duk_context, index: duk_idx_t,
                             ptr: *mut ::std::os::raw::c_void,
                             len: duk_size_t);
    pub fn duk_get_prop(ctx: *mut duk_context, obj_index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_get_prop_string(ctx: *mut duk_context, obj_index: duk_idx_t,
                               key: *const ::std::os::raw::c_char)
     -> duk_bool_t;
    pub fn duk_get_prop_index(ctx: *mut duk_context, obj_index: duk_idx_t,
                              arr_index: duk_uarridx_t) -> duk_bool_t;
    pub fn duk_put_prop(ctx: *mut duk_context, obj_index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_put_prop_string(ctx: *mut duk_context, obj_index: duk_idx_t,
                               key: *const ::std::os::raw::c_char)
     -> duk_bool_t;
    pub fn duk_put_prop_index(ctx: *mut duk_context, obj_index: duk_idx_t,
                              arr_index: duk_uarridx_t) -> duk_bool_t;
    pub fn duk_del_prop(ctx: *mut duk_context, obj_index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_del_prop_string(ctx: *mut duk_context, obj_index: duk_idx_t,
                               key: *const ::std::os::raw::c_char)
     -> duk_bool_t;
    pub fn duk_del_prop_index(ctx: *mut duk_context, obj_index: duk_idx_t,
                              arr_index: duk_uarridx_t) -> duk_bool_t;
    pub fn duk_has_prop(ctx: *mut duk_context, obj_index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_has_prop_string(ctx: *mut duk_context, obj_index: duk_idx_t,
                               key: *const ::std::os::raw::c_char)
     -> duk_bool_t;
    pub fn duk_has_prop_index(ctx: *mut duk_context, obj_index: duk_idx_t,
                              arr_index: duk_uarridx_t) -> duk_bool_t;
    pub fn duk_def_prop(ctx: *mut duk_context, obj_index: duk_idx_t,
                        flags: duk_uint_t);
    pub fn duk_get_global_string(ctx: *mut duk_context,
                                 key: *const ::std::os::raw::c_char)
     -> duk_bool_t;
    pub fn duk_put_global_string(ctx: *mut duk_context,
                                 key: *const ::std::os::raw::c_char)
     -> duk_bool_t;
    pub fn duk_get_prototype(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_set_prototype(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_get_finalizer(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_set_finalizer(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_set_global_object(ctx: *mut duk_context);
    pub fn duk_get_magic(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_int_t;
    pub fn duk_set_magic(ctx: *mut duk_context, index: duk_idx_t,
                         magic: duk_int_t);
    pub fn duk_get_current_magic(ctx: *mut duk_context) -> duk_int_t;
    pub fn duk_put_function_list(ctx: *mut duk_context, obj_index: duk_idx_t,
                                 funcs: *const duk_function_list_entry);
    pub fn duk_put_number_list(ctx: *mut duk_context, obj_index: duk_idx_t,
                               numbers: *const duk_number_list_entry);
    pub fn duk_get_var(ctx: *mut duk_context);
    pub fn duk_put_var(ctx: *mut duk_context);
    pub fn duk_del_var(ctx: *mut duk_context) -> duk_bool_t;
    pub fn duk_has_var(ctx: *mut duk_context) -> duk_bool_t;
    pub fn duk_compact(ctx: *mut duk_context, obj_index: duk_idx_t);
    pub fn duk_enum(ctx: *mut duk_context, obj_index: duk_idx_t,
                    enum_flags: duk_uint_t);
    pub fn duk_next(ctx: *mut duk_context, enum_index: duk_idx_t,
                    get_value: duk_bool_t) -> duk_bool_t;
    pub fn duk_concat(ctx: *mut duk_context, count: duk_idx_t);
    pub fn duk_join(ctx: *mut duk_context, count: duk_idx_t);
    pub fn duk_decode_string(ctx: *mut duk_context, index: duk_idx_t,
                             callback: duk_decode_char_function,
                             udata: *mut ::std::os::raw::c_void);
    pub fn duk_map_string(ctx: *mut duk_context, index: duk_idx_t,
                          callback: duk_map_char_function,
                          udata: *mut ::std::os::raw::c_void);
    pub fn duk_substring(ctx: *mut duk_context, index: duk_idx_t,
                         start_char_offset: duk_size_t,
                         end_char_offset: duk_size_t);
    pub fn duk_trim(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_char_code_at(ctx: *mut duk_context, index: duk_idx_t,
                            char_offset: duk_size_t) -> duk_codepoint_t;
    pub fn duk_equals(ctx: *mut duk_context, index1: duk_idx_t,
                      index2: duk_idx_t) -> duk_bool_t;
    pub fn duk_strict_equals(ctx: *mut duk_context, index1: duk_idx_t,
                             index2: duk_idx_t) -> duk_bool_t;
    pub fn duk_instanceof(ctx: *mut duk_context, index1: duk_idx_t,
                          index2: duk_idx_t) -> duk_bool_t;
    pub fn duk_call(ctx: *mut duk_context, nargs: duk_idx_t);
    pub fn duk_call_method(ctx: *mut duk_context, nargs: duk_idx_t);
    pub fn duk_call_prop(ctx: *mut duk_context, obj_index: duk_idx_t,
                         nargs: duk_idx_t);
    pub fn duk_pcall(ctx: *mut duk_context, nargs: duk_idx_t) -> duk_int_t;
    pub fn duk_pcall_method(ctx: *mut duk_context, nargs: duk_idx_t)
     -> duk_int_t;
    pub fn duk_pcall_prop(ctx: *mut duk_context, obj_index: duk_idx_t,
                          nargs: duk_idx_t) -> duk_int_t;
    pub fn duk_new(ctx: *mut duk_context, nargs: duk_idx_t);
    pub fn duk_pnew(ctx: *mut duk_context, nargs: duk_idx_t) -> duk_int_t;
    pub fn duk_safe_call(ctx: *mut duk_context, func: duk_safe_call_function,
                         nargs: duk_idx_t, nrets: duk_idx_t) -> duk_int_t;
    pub fn duk_eval_raw(ctx: *mut duk_context,
                        src_buffer: *const ::std::os::raw::c_char,
                        src_length: duk_size_t, flags: duk_uint_t)
     -> duk_int_t;
    pub fn duk_compile_raw(ctx: *mut duk_context,
                           src_buffer: *const ::std::os::raw::c_char,
                           src_length: duk_size_t, flags: duk_uint_t)
     -> duk_int_t;
    pub fn duk_dump_function(ctx: *mut duk_context);
    pub fn duk_load_function(ctx: *mut duk_context);
    pub fn duk_log(ctx: *mut duk_context, level: duk_int_t,
                   fmt: *const ::std::os::raw::c_char, ...);
    pub fn duk_log_va(ctx: *mut duk_context, level: duk_int_t,
                      fmt: *const ::std::os::raw::c_char, ap: va_list);
    pub fn duk_push_context_dump(ctx: *mut duk_context);
    pub fn duk_debugger_attach_custom(ctx: *mut duk_context,
                                      read_cb: duk_debug_read_function,
                                      write_cb: duk_debug_write_function,
                                      peek_cb: duk_debug_peek_function,
                                      read_flush_cb:
                                          duk_debug_read_flush_function,
                                      write_flush_cb:
                                          duk_debug_write_flush_function,
                                      request_cb: duk_debug_request_function,
                                      detached_cb:
                                          duk_debug_detached_function,
                                      udata: *mut ::std::os::raw::c_void);
    pub fn duk_debugger_detach(ctx: *mut duk_context);
    pub fn duk_debugger_cooperate(ctx: *mut duk_context);
    pub fn duk_debugger_notify(ctx: *mut duk_context, nvalues: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_debugger_pause(ctx: *mut duk_context);
    pub fn duk_create_heap_default() -> *mut duk_context;
    pub fn duk_xmove_top(to_ctx: *mut duk_context, from_ctx: *mut duk_context,
                         count: duk_idx_t);
    pub fn duk_xcopy_top(to_ctx: *mut duk_context, from_ctx: *mut duk_context,
                         count: duk_idx_t);
    pub fn duk_push_string_file(ctx: *mut duk_context,
                                path: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn duk_push_thread(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_push_thread_new_globalenv(ctx: *mut duk_context) -> duk_idx_t;
    pub fn duk_push_buffer(ctx: *mut duk_context, size: duk_size_t,
                           dynamic: duk_bool_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_push_fixed_buffer(ctx: *mut duk_context, size: duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_push_dynamic_buffer(ctx: *mut duk_context, size: duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_push_external_buffer(ctx: *mut duk_context);
    pub fn duk_is_callable(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_primitive(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_object_coercible(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_error(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_eval_error(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_range_error(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_reference_error(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_syntax_error(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_type_error(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_is_uri_error(ctx: *mut duk_context, index: duk_idx_t)
     -> duk_bool_t;
    pub fn duk_require_type_mask(ctx: *mut duk_context, index: duk_idx_t,
                                 mask: duk_uint_t);
    pub fn duk_require_callable(ctx: *mut duk_context, index: duk_idx_t);
    pub fn duk_require_object_coercible(ctx: *mut duk_context,
                                        index: duk_idx_t);
    pub fn duk_to_buffer(ctx: *mut duk_context, index: duk_idx_t,
                         out_size: *mut duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_to_fixed_buffer(ctx: *mut duk_context, index: duk_idx_t,
                               out_size: *mut duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_to_dynamic_buffer(ctx: *mut duk_context, index: duk_idx_t,
                                 out_size: *mut duk_size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn duk_safe_to_string(ctx: *mut duk_context, index: duk_idx_t)
     -> *const ::std::os::raw::c_char;
    pub fn duk_eval(ctx: *mut duk_context);
    pub fn duk_eval_noresult(ctx: *mut duk_context);
    pub fn duk_peval(ctx: *mut duk_context) -> duk_int_t;
    pub fn duk_peval_noresult(ctx: *mut duk_context) -> duk_int_t;
    pub fn duk_compile(ctx: *mut duk_context, flags: duk_uint_t);
    pub fn duk_pcompile(ctx: *mut duk_context, flags: duk_uint_t)
     -> duk_int_t;
    pub fn duk_eval_string(ctx: *mut duk_context,
                           src: *const ::std::os::raw::c_char);
    pub fn duk_eval_string_noresult(ctx: *mut duk_context,
                                    src: *const ::std::os::raw::c_char);
    pub fn duk_peval_string(ctx: *mut duk_context,
                            src: *const ::std::os::raw::c_char) -> duk_int_t;
    pub fn duk_peval_string_noresult(ctx: *mut duk_context,
                                     src: *const ::std::os::raw::c_char)
     -> duk_int_t;
    pub fn duk_compile_string(ctx: *mut duk_context, flags: duk_uint_t,
                              src: *const ::std::os::raw::c_char);
    pub fn duk_compile_string_filename(ctx: *mut duk_context,
                                       flags: duk_uint_t,
                                       src: *const ::std::os::raw::c_char);
    pub fn duk_pcompile_string(ctx: *mut duk_context, flags: duk_uint_t,
                               src: *const ::std::os::raw::c_char)
     -> duk_int_t;
    pub fn duk_pcompile_string_filename(ctx: *mut duk_context,
                                        flags: duk_uint_t,
                                        src: *const ::std::os::raw::c_char)
     -> duk_int_t;
    pub fn duk_eval_lstring(ctx: *mut duk_context,
                            buf: *const ::std::os::raw::c_char,
                            len: duk_size_t);
    pub fn duk_eval_lstring_noresult(ctx: *mut duk_context,
                                     buf: *const ::std::os::raw::c_char,
                                     len: duk_size_t);
    pub fn duk_peval_lstring(ctx: *mut duk_context,
                             buf: *const ::std::os::raw::c_char,
                             len: duk_size_t) -> duk_int_t;
    pub fn duk_peval_lstring_noresult(ctx: *mut duk_context,
                                      buf: *const ::std::os::raw::c_char,
                                      len: duk_size_t) -> duk_int_t;
    pub fn duk_compile_lstring(ctx: *mut duk_context, flags: duk_uint_t,
                               buf: *const ::std::os::raw::c_char,
                               len: duk_size_t);
    pub fn duk_compile_lstring_filename(ctx: *mut duk_context,
                                        flags: duk_uint_t,
                                        buf: *const ::std::os::raw::c_char,
                                        len: duk_size_t);
    pub fn duk_pcompile_lstring(ctx: *mut duk_context, flags: duk_uint_t,
                                buf: *const ::std::os::raw::c_char,
                                len: duk_size_t) -> duk_int_t;
    pub fn duk_pcompile_lstring_filename(ctx: *mut duk_context,
                                         flags: duk_uint_t,
                                         buf: *const ::std::os::raw::c_char,
                                         len: duk_size_t) -> duk_int_t;
    pub fn duk_eval_file(ctx: *mut duk_context,
                         path: *const ::std::os::raw::c_char);
    pub fn duk_eval_file_noresult(ctx: *mut duk_context,
                                  path: *const ::std::os::raw::c_char);
    pub fn duk_peval_file(ctx: *mut duk_context,
                          path: *const ::std::os::raw::c_char) -> duk_int_t;
    pub fn duk_peval_file_noresult(ctx: *mut duk_context,
                                   path: *const ::std::os::raw::c_char)
     -> duk_int_t;
    pub fn duk_compile_file(ctx: *mut duk_context, flags: duk_uint_t,
                            path: *const ::std::os::raw::c_char);
    pub fn duk_pcompile_file(ctx: *mut duk_context, flags: duk_uint_t,
                             path: *const ::std::os::raw::c_char)
     -> duk_int_t;
    pub fn duk_dump_context_stdout(ctx: *mut duk_context);
    pub fn duk_dump_context_stderr(ctx: *mut duk_context);
}
